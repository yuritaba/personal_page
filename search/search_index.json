{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yuri Tabacof","text":""},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - Data 05/09/2025</li> <li> Roteiro 2</li> <li> Roteiro 3</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer.</p>"},{"location":"roteiro1/main/","title":"Roteiro - Data","text":"<p>Este relat\u00f3rio cont\u00e9m: gera\u00e7\u00e3o dos dados (Ex.1 e Ex.2), visualiza\u00e7\u00f5es e pr\u00e9-processamento do Spaceship Titanic (Ex.3), com an\u00e1lise explicativa.</p>"},{"location":"roteiro1/main/#visao-geral-do-pipeline","title":"Vis\u00e3o geral do pipeline","text":"<pre><code>flowchart LR\n  A[Ex.1: Dados 2D Gauss] --&gt; B[Visualiza\u00e7\u00e3o &amp; Fronteiras]\n  C[Ex.2: Dados 5D MVN] --&gt; D[PCA 5\u21922 e Scatter]\n  E[Ex.3: Kaggle Titanic] --&gt; F[Limpeza &amp; Escala tanh]\n  B --&gt; G[An\u00e1lises]\n  D --&gt; G\n  F --&gt; G</code></pre>"},{"location":"roteiro1/main/#exercicio-1","title":"Exerc\u00edcio 1","text":"<p>Gera\u00e7\u00e3o e plotagem dos dados (o output do md exec n\u00e3o funciona com plt.show, ent\u00e3o o gr\u00e1fico da sa\u00edda \u00e9 mostrado abaixo do c\u00f3digo como imagem):   </p> <p>obs: ajuda de IA</p> <p> Editor (session: default) Run <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng(42)\n\n# Par\u00e2metros fornecidos\nmeans = {\n    0: np.array([2.0, 3.0]),\n    1: np.array([5.0, 6.0]),\n    2: np.array([8.0, 1.0]),\n    3: np.array([15.0, 14.0]),\n}\nstds = {\n    0: np.array([0.8, 2.5]),\n    1: np.array([1.2, 1.9]),\n    2: np.array([0.9, 0.9]),\n    3: np.array([0.5, 2.0]),\n}\n\nX_list, y_list = [], []\nfor k in range(4):\n    mu = means[k]\n    sd = stds[k]\n    cov = np.diag(sd**2)\n    Xi = rng.multivariate_normal(mu, cov, size=100)\n    yi = np.full(100, k)\n    X_list.append(Xi)\n    y_list.append(yi)\n\nX = np.vstack(X_list)\ny = np.concatenate(y_list)\n\n# Scatter por classe\nfig, ax = plt.subplots(figsize=(6,5))\nfor k, color in zip(range(4), [\"tab:blue\",\"tab:orange\",\"tab:green\",\"tab:red\"]):\n    ax.scatter(X[y==k,0], X[y==k,1], s=18, alpha=0.85, label=f\"Classe {k}\", c=color)\n\nax.set_title(\"Ex.1 \u2014 Dados 2D (4 classes, gaussianas)\")\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"x2\")\nax.legend(loc=\"best\", frameon=True)\nax.grid(True, ls=\":\")\nplt.show()\n</pre> Output Clear <pre></pre> </p> <p></p>"},{"location":"roteiro1/main/#analyze-and-draw-boundaries","title":"Analyze and Draw Boundaries:","text":"<ul> <li>Examine the scatter plot carefully. Describe the distribution and overlap of the four classes.</li> </ul> <p>Red is isolated in the top right, green is isolated in the bottom right (but close to blue and orange clusters), blue is mostly on the left side with some spread, and orange is in the middle overlapping a little bit with blue.</p> <ul> <li>Based on your visual inspection, could a simple, linear boundary separate all classes?</li> </ul> <p>No, because it is impossible to separate class 0 and 1 using a line. This means that a linear model would not be able to classify these points correctly.</p> <ul> <li>On your plot, sketch the decision boundaries that you think a trained neural network might learn to separate these classes.</li> </ul> <p>It should probably look something like this:</p> <p></p>"},{"location":"roteiro1/main/#exercicio-2","title":"Exerc\u00edcio 2","text":"<p>Generating the Data</p> <p> Editor (session: default) Run <pre>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng(123)\n\nmiA = np.zeros(5)\nSomA = np.array([\n    [1,   0.8, 0.1, 0,   0  ],\n    [0.8, 1,   0.3, 0,   0  ],\n    [0.1, 0.3, 1,   0.5, 0  ],\n    [0,   0,   0.5, 1,   0.2],\n    [0,   0,   0,   0.2, 1  ],\n], dtype=float)\n\nmiB = np.full(5, 1.5)\nSomB = np.array([\n    [1.5, -0.7, 0.2, 0,   0  ],\n    [-0.7, 1.5, 0.4, 0,   0  ],\n    [0.2,  0.4, 1.5, 0.6, 0  ],\n    [0,    0,   0.6, 1.5, 0.3],\n    [0,    0,   0,   0.3, 1.5],\n], dtype=float)\n\ndef nearest_psd(M, eps=1e-8):\n    # Corrige PSD numericamente (clipe de autovalores)\n    w, v = np.linalg.eigh(M)\n    w = np.clip(w, eps, None)\n    return (v * w) @ v.T\n\nSomA = nearest_psd(SomA)\nSomB = nearest_psd(SomB)\n\nXA = rng.multivariate_normal(miA, SomA, size=500)\nXB = rng.multivariate_normal(miB, SomB, size=500)\n\nX5 = np.vstack([XA, XB])\ny5 = np.array([0]*500 + [1]*500)\n\n# PCA via SVD\nXc = X5 - X5.mean(axis=0, keepdims=True)\nU, S, Vt = np.linalg.svd(Xc, full_matrices=False)\n# Componentes principais nas colunas de V (linhas de Vt)\nW = Vt[:2].T            # 5x2\nX2 = Xc @ W             # proje\u00e7\u00e3o 2D\n\n# vari\u00e2ncia explicada\nexplained = (S**2) / (len(X5)-1)\nratio = explained / explained.sum()\nvar_ratio = ratio[:2]\n\nfig, ax = plt.subplots(figsize=(6,5))\nax.scatter(X2[y5==0,0], X2[y5==0,1], s=14, alpha=0.7, label=\"Classe A\", c=\"tab:blue\")\nax.scatter(X2[y5==1,0], X2[y5==1,1], s=14, alpha=0.7, label=\"Classe B\", c=\"tab:red\")\nax.set_title(f\"Ex.2 \u2014 PCA (5D\u21922D), vari\u00e2ncia explicada PC1+PC2 = {var_ratio.sum():.3f}\")\nax.set_xlabel(\"PC1\"); ax.set_ylabel(\"PC2\")\nax.legend(frameon=True); ax.grid(True, ls=\":\")\nplt.show()\n</pre> Output Clear <pre></pre> </p> <p></p>"},{"location":"roteiro1/main/#analyzing-the-plots","title":"Analyzing the Plots:","text":"<ul> <li>Based on your 2D projection, describe the relationship between the two classes.</li> </ul> <p>The two classes are heavily overlapping in the 2D projection, therefore it would be impossible to separate them with high accuracy using only two dimension.</p> <ul> <li>Discuss the linear separability of the data. Explain why this type of data structure poses a challenge for simple linear models and would likely require a multi-layer neural network with non-linear activation functions to be classified accurately.</li> </ul> <p>The data is not linearly separable in the 2D projection, as there is significant overlap between the two classes. This means that no straight line can be drawn to separate all points of one class from the other. Simple linear models, such as logistic regression or linear SVMs, rely on finding a linear decision boundary to classify data points. Therefore, a multi-layer neural network with non-linear activation functions is necessary to capture the complex relationships and patterns in the data, allowing for more flexible decision boundaries that can better separate the classes.</p>"},{"location":"roteiro1/main/#exercicio-3","title":"Exerc\u00edcio 3","text":""},{"location":"roteiro1/main/#describing-the-data","title":"Describing the Data:","text":"<p>Briefly describe the dataset's objective (i.e., what does the Transported column represent?).</p> <p>O objetivo \u00e9 prever a coluna Transported, que indica se o passageiro foi transportado para outra dimens\u00e3o (True ou False).</p> <p>List the features and identify which are numerical (e.g., Age, RoomService) and which are categorical (e.g., HomePlanet, Destination).</p> <p>Features num\u00e9ricas:</p> <ul> <li>Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck.</li> </ul> <p>Features categ\u00f3ricas:</p> <ul> <li>HomePlanet, CryoSleep, Cabin (deck/num/side), Destination, VIP, Name.</li> </ul> <p>Identificadores:</p> <ul> <li>PassengerId (n\u00e3o usado como feature preditiva).</li> </ul> <p>Investigate the dataset for missing values. Which columns have them, and how many?</p> <p>Rodando o c\u00f3digo abaixo (n\u00e3o ir\u00e1 funcionar aqui com o markdown exec, mas funciona no Python localmente):</p> <p> Editor (session: default) Run <pre>import pandas as pd\n\n# carregar dados\nimport pandas as pd\nurl = \"https://yuritaba.github.io/personal_page/roteiro1/spaceship-titanic/train.csv\"\ndf = pd.read_csv(url)\nna_counts = df.isna().sum().sort_values(ascending=False)\nna_counts.head(15)</pre> Output Clear <pre></pre> </p> <p>Output:</p> <pre><code>CryoSleep       217\nShoppingMall    208\nVIP             203\nHomePlanet      201\nName            200\nCabin           199\nVRDeck          188\nFoodCourt       183\nSpa             183\nDestination     182\nRoomService     181\nAge             179\nPassengerId       0\nTransported       0\ndtype: int64\n</code></pre> <p>Logo, as colunas com valores ausentes s\u00e3o todas exceto PassengerId e Transported.</p> <p>Preprocess the Data: Your goal is to clean and transform the data so it can be fed into a neural network. The tanh activation function produces outputs in the range [-1, 1], so your input data should be scaled appropriately for stable training.</p> <ul> <li> <p>Encode Categorical Features: Convert categorical columns like HomePlanet, CryoSleep, and Destination into a numerical format. One-hot encoding is a good choice.</p> </li> <li> <p>Normalize/Standardize Numerical Features: Scale the numerical columns (e.g., Age, RoomService, etc.). Since the tanh activation function is centered at zero and outputs values in [-1, 1], Standardization (to mean 0, std 1) or Normalization to a [-1, 1] range are excellent choices. Implement one and explain why it is a good practice for training neural networks with this activation function.</p> </li> </ul> <p>Primeiramente fazemos um one-hot encoding das colunas categ\u00f3ricas, depois lidamos com os valores ausentes (imputa\u00e7\u00e3o), e tamb\u00e9m normalizamos as colunas num\u00e9ricas para o intervalo [-1, 1].</p> <p>(Novamente, o c\u00f3digo abaixo n\u00e3o ir\u00e1 funcionar aqui com o markdown exec, mas funciona no Python localmente):</p> <p>obs: ajuda de IA</p> <p> Editor (session: default) Run <pre>\n# separar target\ny = df[\"Transported\"].astype(int)\nX = df.drop(columns=[\"Transported\",\"PassengerId\",\"Name\"])\n\n# separar colunas categ\u00f3ricas e num\u00e9ricas\nnum_cols = [\"Age\",\"RoomService\",\"FoodCourt\",\"ShoppingMall\",\"Spa\",\"VRDeck\"]\ncat_cols = [\"HomePlanet\",\"CryoSleep\",\"Cabin\",\"Destination\",\"VIP\"]\n\n# one-hot encoding manual\nX_cat = []\nfor col in cat_cols:\n    uniques = sorted(X[col].dropna().unique())\n    mapping = {val:i for i,val in enumerate(uniques)}\n    arr = np.zeros((len(X), len(uniques)))\n    for i, val in enumerate(X[col]):\n        if pd.isna(val):\n            continue\n        arr[i, mapping[val]] = 1\n    X_cat.append(arr)\nX_cat = np.concatenate(X_cat, axis=1) if X_cat else np.empty((len(X),0))\n\n# imputar valores num\u00e9ricos (mediana)\nfor col in num_cols:\n    median = X[col].median()\n    X[col] = X[col].fillna(median)\n\n# normalizar num\u00e9ricas para [-1,1]\nX_num = X[num_cols].values.astype(float)\nmins = X_num.min(axis=0)\nmaxs = X_num.max(axis=0)\nX_num_scaled = 2 * (X_num - mins) / (maxs - mins) - 1\n\n# juntar num\u00e9ricas e categ\u00f3ricas\nX_proc = np.concatenate([X_num_scaled, X_cat], axis=1)\n\ndf.head()</pre> Output Clear <pre><code></code></pre> </p> <ul> <li>Num\u00e9ricas \u2192 preenchidas com a mediana de cada coluna.</li> </ul> <p>A mediana \u00e9 robusta contra outliers, evitando distor\u00e7\u00f5es no escalonamento para [-1,1].</p> <ul> <li>Categ\u00f3ricas \u2192 no one-hot, valores nulos n\u00e3o viraram nenhuma categoria ativa (linha de zeros).</li> </ul> <p>Isso equivale a tratar o missing como uma \u201ccategoria ausente\u201d sem inventar valores, mantendo consist\u00eancia no vetor de entrada.</p> <p>Visualize the Results:</p> <p>Create histograms for one or two numerical features (like FoodCourt or Age) before and after scaling to show the effect of your transformation.</p> <p></p> <p>Como esperado, a \"propor\u00e7\u00e3o\" continua a mesma, mas agora os valores est\u00e3o entre -1 e 1, adequados para a tanh.</p>"},{"location":"roteiro2/main/","title":"2. Perceptron","text":""},{"location":"roteiro2/main/#diagrama-de-classes-do-banco","title":"Diagrama de Classes do Banco","text":"<pre><code>classDiagram\n    class Conta {\n        - String id\n        # double saldo\n        - Cliente cliente\n        + sacar(double valor)\n        + depositar(double valor)\n    }\n    class Cliente {\n        - String id\n        - String nome\n        - List&lt;Conta&gt; contas\n    }\n    class PessoaFisica {\n        - String cpf\n    }\n    class PessoaJuridica {\n        - String cnpj\n    }\n    class ContaCorrente {\n        - double limite\n        + sacar(double valor)\n    }\n    class ContaPoupanca {\n        + sacar(double valor)\n    }\n    Conta *-- Cliente\n    Conta &lt;|-- ContaCorrente\n    Conta &lt;|-- ContaPoupanca\n    Cliente &lt;|-- PessoaFisica\n    Cliente &lt;|-- PessoaJuridica</code></pre>"},{"location":"roteiro2/main/#diagrama-de-sequencia-de-autorizacao","title":"Diagrama de Seq\u00fc\u00eancia de Autoriza\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre>"},{"location":"roteiro3/main/","title":"3. MLP","text":"<p>Running the code below in Browser (Woooooowwwwww!!!!!!). <sup>1</sup></p> <p> Editor (session: default) Run <pre>import ssl\nimport pandas as pd\n\ndf = pd.DataFrame()\ndf['AAPL'] = pd.Series([1, 2, 3])\ndf['MSFT'] = pd.Series([4, 5, 6])\ndf['GOOGL'] = pd.Series([7, 8, 9])\n\nprint(df)\n</pre> Output Clear <pre></pre> </p> <ol> <li> <p>Pyodide \u21a9</p> </li> </ol>"},{"location":"roteiro4/main/","title":"4. Metrics","text":"<p>Se chegou aqui, \u00e9 porque voc\u00ea est\u00e1 interessado em saber mais. Logo, de brinde, como rodar um c\u00f3digo <code>Python</code> aqui.</p> 2025-09-06T01:21:48.817785 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-06T01:21:50.103674 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Markdown-exec \u00e9 uma extens\u00e3o do Markdown que permite executar c\u00f3digo Python diretamente no Markdown. Isso \u00e9 \u00fatil para gerar resultados din\u00e2micos ou executar scripts de forma interativa.</p>"}]}